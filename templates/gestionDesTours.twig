<!DOCTYPE html>
<html lang="fr">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous" />
<!-- Inclure la bibliothèque htmx via CDN -->
  <script src="https://unpkg.com/htmx.org@latest/dist/htmx.min.js"></script> 

    <title>Placement des rencontres</title>
  </head>
  <body>
   
    {{ include('header.twig') }}
    </div>
    {% for tournoi in ListeDesTournois %}
       {% if tournoi.isArchived == 0 %}
             <a href="RepartitionDesTours.php?id_tournoi={{ tournoi.id }}" class="btn btn-secondary">{{ tournoi.nom }}</a>
        {% endif %}
    {% endfor %}
    <input type="text" id="filter" name="filter" class="input-group-text" placeholder="Filtre">
     {{genererPlacement|raw}} 


<script>

//function filter


//



   // Cette partie reste inchangée
   function updateOptions(selectedElement) {
    // Récupération de l'élément <td> qui entoure le <select>
    let cell = selectedElement.closest('td');

    // Définir les couleurs pour chaque catégorie
   let categoryColors = {
    'U17F': '#FFDDDD',  // Rouge clair pour U17F
    'U17M': '#FFC0C0',  // Rouge légèrement plus foncé pour U17M
    'U15M': '#C0C0FF',  // Bleu clair pour U15M
    'U15F': '#B0B0FF',  // Bleu légèrement plus foncé pour U15F
    'U13M': '#C0FFC0',  // Vert clair pour U13M
    'U13F': '#B0FFB0',   // Vert légèrement plus foncé pour U13F

    'loisir': '#FFD700',            // Or pour Loisir
    'senior': '#DAA520',            // Goldenrod pour Senior
    'U11M': '#FFA500',              // Orange pour U11M
    'U11F': '#FF8C00',              // Orange foncé pour U11F
    'MiniDebutant': '#DDA0DD',      // Prune pour MiniDebutant
    'MiniDebrouillard': '#DA70D6',  // Orchidée pour MiniDebrouillard
    'MiniConfirme': '#BA55D3'       // Orchidée moyen pour MiniConfirme
};


    // Récupérez la catégorie à partir de la valeur de l'option sélectionnée
    let parts = selectedElement.value.split("-");
    if (parts[1] && categoryColors[parts[1]]) {
        cell.style.backgroundColor = categoryColors[parts[1]];
    } else {
        cell.style.backgroundColor = ''; // Remettre la couleur par défaut ou aucune couleur
    }

    let allSelects = document.querySelectorAll('select');
    let selectedValues = []; // Stocker toutes les valeurs sélectionnées

    // Recueillir toutes les valeurs actuellement sélectionnées
    allSelects.forEach(select => {
        if (select.value !== "default") {
            selectedValues.push(select.value);
        }
    });

    // Pour chaque liste déroulante, supprimez les options qui ont déjà été sélectionnées ailleurs
    allSelects.forEach(select => {
        let options = Array.from(select.options);
        options.forEach(option => {
            if (selectedValues.includes(option.value) && select.value !== option.value) {
                select.removeChild(option);
            }
        });
    });
}



// Vous devez également avoir une fonction pour réinitialiser toutes les options

function resetAllOptions() {
    let allOptions = document.querySelectorAll('select option');
    allOptions.forEach(option => {
        option.disabled = false;
    });
}


// Au chargement de la page, mettez à jour les options pour chaque liste déroulante

window.onload = function() {
    let allSelects = document.querySelectorAll('select');
    allSelects.forEach(select => {
        updateOptions(select);
    });
};

// Lorsqu'une option est sélectionnée, mettez à jour les options des autres listes déroulantes
document.addEventListener('change', function(event) {
    if (event.target.tagName === 'SELECT') {
        updateOptions(event.target);
    }
});




// Sélection de tous les éléments <select> dans le formulaire
const selectElements = document.querySelectorAll('#rencontreForm select');

// Fonction de validation du formulaire
function validerFormulaire() {
    // Logique de validation ici...

    // Exemple de validation : vérifier si tous les <select> sont sélectionnés
    let formulaireValide = true;
    selectElements.forEach((select) => {
        if (select.value === '') {
            formulaireValide = false;
        }
    });

    // Si le formulaire est valide, soumettre le formulaire
    if (formulaireValide) {
        document.getElementById('rencontreForm').submit();
    }
}

// Ajout d'un écouteur d'événement à chaque élément <select>
selectElements.forEach((select) => {
    //select.addEventListener('change', validerFormulaire);
});




//filtre de la page
document.addEventListener('DOMContentLoaded', function () {
    var filterInput = document.getElementById('filter');
    var selectElements = document.querySelectorAll('.filterable');

    // Récupérer la valeur du champ texte depuis le localStorage (si elle existe)
    var savedFilterValue = localStorage.getItem('filterValue');
    if (savedFilterValue) {
        filterInput.value = savedFilterValue;
        filterSelectOptions(savedFilterValue);
    }

    filterInput.addEventListener('input', function () {
        var filterValue = filterInput.value.toLowerCase();

        // Enregistrez la valeur dans le localStorage à chaque modification
        localStorage.setItem('filterValue', filterValue);

        filterSelectOptions(filterValue);
    });

    function filterSelectOptions(filterValue) {
        selectElements.forEach(function (selectElement) {
            Array.from(selectElement.options).forEach(function (option) {
                var optionText = option.text.toLowerCase();
                if (optionText.includes(filterValue)) {
                    option.style.display = '';
                } else {
                    option.style.display = 'none';
                }
            });
        });
    }
});



// fin filtre

</script>
<style>
        #filter {
            position: fixed;
            top: 7%;
            left: 2%;
            width: 10%;
            height: 5px;
            z-index: 999;
            background-color: #fff;
            padding: 10px;
            font-weight: bold;
            
        }
    .submit {
        position: fixed;
        bottom: 10px; 
        right: 10px; 

    }

</style>
